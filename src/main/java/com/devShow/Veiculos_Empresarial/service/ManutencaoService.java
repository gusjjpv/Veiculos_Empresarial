package main.java.com.devShow.Veiculos_Empresarial.service;

import main.java.com.devShow.Veiculos_Empresarial.model.*;
import main.java.com.devShow.Veiculos_Empresarial.repository.*;
import java.time.LocalDate;

/**
 * Service para opera√ß√µes relacionadas a Manuten√ß√µes.
 * Cont√©m a l√≥gica de neg√≥cio para gerenciamento de manuten√ß√µes da frota.
 */
public class ManutencaoService {
    
    private ManutencaoRepository manutencaoRepository;
    private VeiculoRepository veiculoRepository;
    
    public ManutencaoService() {
        this.manutencaoRepository = new ManutencaoRepository();
        this.veiculoRepository = new VeiculoRepository();
    }
    
    /**
     * Inicia uma nova manuten√ß√£o para um ve√≠culo.
     * 
     * @param placaVeiculo Placa do ve√≠culo
     * @param descricaoServico Descri√ß√£o do servi√ßo a ser realizado
     * @param nomeOficina Nome da oficina (opcional)
     * @param dataSaidaPrevista Data prevista para sa√≠da (opcional)
     * @return true se iniciou com sucesso, false caso contr√°rio
     */
    public boolean iniciarManutencao(String placaVeiculo, String descricaoServico, String nomeOficina, LocalDate dataSaidaPrevista) {
        try {
            // Valida√ß√µes
            validarDadosManutencao(placaVeiculo, descricaoServico);
            
            // Busca o ve√≠culo
            Veiculo veiculo = veiculoRepository.buscarVeiculoPorPlaca(placaVeiculo);
            if (veiculo == null) {
                throw new IllegalArgumentException("Ve√≠culo com placa " + placaVeiculo + " n√£o encontrado");
            }
            
            // Verifica se o ve√≠culo pode entrar em manuten√ß√£o
            if (veiculo.getStatus() == StatusVeiculo.MANUTENCAO) {
                throw new IllegalStateException("Ve√≠culo j√° est√° em manuten√ß√£o");
            }
            
            if (veiculo.getStatus() == StatusVeiculo.EM_USO) {
                throw new IllegalStateException("Ve√≠culo est√° em uso. Finalize o uso antes de iniciar manuten√ß√£o");
            }
            
            // Cria a manuten√ß√£o com o construtor existente
            Manutencao novaManutencao = new Manutencao(
                veiculo,
                descricaoServico,
                LocalDate.now(), // Data de entrada (hoje)
                dataSaidaPrevista,
                nomeOficina
            );
            
            // Salva a manuten√ß√£o
            manutencaoRepository.salvar(novaManutencao);
            
            // Atualiza status do ve√≠culo para MANUTENCAO
            veiculo.setStatus(StatusVeiculo.MANUTENCAO);
            veiculoRepository.update(veiculo);
            
            System.out.println("‚úÖ Manuten√ß√£o iniciada com sucesso!");
            System.out.println("   Ve√≠culo: " + veiculo.getPlaca() + " (" + veiculo.getModelo() + ")");
            System.out.println("   Servi√ßo: " + descricaoServico);
            if (nomeOficina != null && !nomeOficina.trim().isEmpty()) {
                System.out.println("   Oficina: " + nomeOficina);
            }
            if (dataSaidaPrevista != null) {
                System.out.println("   Previs√£o de sa√≠da: " + dataSaidaPrevista);
            }
            
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao iniciar manuten√ß√£o: " + e.getMessage());
        }
        
        return false;
    }
    
    /**
     * Finaliza uma manuten√ß√£o.
     * 
     * @param placaVeiculo Placa do ve√≠culo em manuten√ß√£o
     * @param custoReal Custo real da manuten√ß√£o
     * @return true se finalizou com sucesso, false caso contr√°rio
     */
    public boolean finalizarManutencao(String placaVeiculo, double custoReal) {
        try {
            // Busca o ve√≠culo
            Veiculo veiculo = veiculoRepository.buscarVeiculoPorPlaca(placaVeiculo);
            if (veiculo == null) {
                throw new IllegalArgumentException("Ve√≠culo com placa " + placaVeiculo + " n√£o encontrado");
            }
            
            // Verifica se est√° em manuten√ß√£o
            if (veiculo.getStatus() != StatusVeiculo.MANUTENCAO) {
                throw new IllegalStateException("Ve√≠culo n√£o est√° em manuten√ß√£o");
            }
            
            // Valida o custo
            if (custoReal < 0) {
                throw new IllegalArgumentException("Custo real n√£o pode ser negativo");
            }
            
            // Por enquanto, implementa√ß√£o simplificada
            // TODO: Buscar manuten√ß√£o ativa espec√≠fica do ve√≠culo e finalizar
            
            // Libera o ve√≠culo (volta para dispon√≠vel)
            veiculo.setStatus(StatusVeiculo.DISPONIVEL);
            veiculoRepository.update(veiculo);
            
            System.out.println("‚úÖ Manuten√ß√£o finalizada com sucesso!");
            System.out.println("   Ve√≠culo: " + veiculo.getPlaca());
            System.out.println("   Custo: R$ " + String.format("%.2f", custoReal));
            System.out.println("   Status: Ve√≠culo dispon√≠vel novamente");
            
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao finalizar manuten√ß√£o: " + e.getMessage());
        }
        
        return false;
    }
    
    /**
     * Valida se um ve√≠culo pode entrar em manuten√ß√£o.
     * 
     * @param placaVeiculo Placa do ve√≠culo
     * @return true se pode entrar em manuten√ß√£o, false caso contr√°rio
     */
    public boolean podeEntrarEmManutencao(String placaVeiculo) {
        Veiculo veiculo = veiculoRepository.buscarVeiculoPorPlaca(placaVeiculo);
        
        if (veiculo == null) {
            System.err.println("‚ùå Ve√≠culo n√£o encontrado");
            return false;
        }
        
        if (veiculo.getStatus() == StatusVeiculo.MANUTENCAO) {
            System.err.println("‚ùå Ve√≠culo j√° est√° em manuten√ß√£o");
            return false;
        }
        
        if (veiculo.getStatus() == StatusVeiculo.EM_USO) {
            System.err.println("‚ùå Ve√≠culo est√° em uso");
            return false;
        }
        
        return true;
    }
    
    /**
     * Verifica se um ve√≠culo est√° em manuten√ß√£o.
     * 
     * @param placaVeiculo Placa do ve√≠culo
     * @return true se est√° em manuten√ß√£o, false caso contr√°rio
     */
    public boolean veiculoEstaEmManutencao(String placaVeiculo) {
        Veiculo veiculo = veiculoRepository.buscarVeiculoPorPlaca(placaVeiculo);
        return veiculo != null && veiculo.getStatus() == StatusVeiculo.MANUTENCAO;
    }
    
    /**
     * Gera relat√≥rio simples de manuten√ß√µes.
     * 
     * @return String com informa√ß√µes b√°sicas
     */
    public String gerarRelatorioManutencoes() {
        StringBuilder relatorio = new StringBuilder();
        relatorio.append("üîß RELAT√ìRIO DE MANUTEN√á√ïES\n");
        relatorio.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
        
        // Por enquanto, implementa√ß√£o simplificada
        // TODO: Implementar quando ManutencaoRepository tiver m√©todos de listagem
        relatorio.append("‚ö†Ô∏è Funcionalidade em desenvolvimento\n");
        relatorio.append("Aguardando implementa√ß√£o completa do ManutencaoRepository\n");
        
        return relatorio.toString();
    }
    
    // ==================== M√âTODOS AUXILIARES ====================
    
    /**
     * Valida os dados de entrada para manuten√ß√£o.
     */
    private void validarDadosManutencao(String placaVeiculo, String descricaoServico) {
        if (placaVeiculo == null || placaVeiculo.trim().isEmpty()) {
            throw new IllegalArgumentException("Placa do ve√≠culo √© obrigat√≥ria");
        }
        
        if (descricaoServico == null || descricaoServico.trim().isEmpty()) {
            throw new IllegalArgumentException("Descri√ß√£o do servi√ßo √© obrigat√≥ria");
        }
        
        if (descricaoServico.length() < 5) {
            throw new IllegalArgumentException("Descri√ß√£o do servi√ßo deve ter pelo menos 5 caracteres");
        }
    }
}
